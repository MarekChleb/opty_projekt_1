def create_A_matrix(n):
    B =  [[0 for x in range(n)] for y in range(n)] 
    for i in range(n):
        for j in range(n):
            if i-j > 0:
                B[i][j] = 2* pow(10,i-j)
            elif i == j:
                B[i][j] = 1
            else:
                B[i][j]= 0
    return matrix(QQ,B)

def create_B_matrix(n):
    B=[]
    for i in range(n):
        B.append( pow(100,i))
    return matrix(QQ,B)

def create_C_matrix(n):
    c=[]
    for i in range(n):
        c.append( pow(10,n-i-1))
    return vector(QQ,c)

def create_Klee_minty_problem(n):
    for i in range(1,n+1):
        x='x'
        variables.append(x+str(i))
        
    A = create_A_matrix(n)
    B = create_B_matrix(n)
    C = create_C_matrix(n)
    return InteractiveLPProblem(A, B, C, variables, base_ring=QQ, variable_type=">=")